package main.java.edu.chalmers.projecttemplate.view;


import javax.imageio.ImageIO;
import javax.swing.*;

import main.java.edu.chalmers.projecttemplate.model.*;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Objects;


/**
 *Responsibility: the main class for the view. Sets the
 * visual components of the game.
 * Uses: ButtonBoard, Game, GameHandler
 * Used by: ProjectController
 */

public class ProjectView extends JFrame implements PropertyChangeListener {


    private final ButtonBoard buttonBoard;
    private Board hexagonBoard;

    private BufferedImage bufferedImage;
    private final GameHandler gameHandler;


    public ProjectView(final GameHandler gameHandler) {
        initComponents();
        jPanel1.setLayout(new FlowLayout(5,0,0 ));

        this.gameHandler = gameHandler;
        this.buttonBoard = new ButtonBoard(gameHandler.getCurrentGame().getBoard(), jPanel1);
        this.hexagonBoard = gameHandler.getCurrentGame().getBoard();

        try{
            String path = "main/Resources/smurfy.png";
            final File file = new File(path);
            this.bufferedImage=ImageIO.read(file);
        }catch (IOException e){
            e.printStackTrace();
            System.exit(1);
        }


        this.setTitle("Trap the smurf!");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new JButton();
        jPanel1 = new JPanel();
        jRadioButton1 = new JRadioButton();
        jRadioButton2 = new JRadioButton();
        jRadioButton3 = new JRadioButton();
        jLabel2 = new JLabel();
        jLabelWinLose = new JLabel();
        jLabelRecord = new JLabel();
        jLabelRule = new JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new Dimension(800, 575));
        setMinimumSize(new Dimension(800, 575));

        jButton1.setBackground(new Color(102, 255, 255));

        final GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 221, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 151, Short.MAX_VALUE)
        );

        jPanel1.setMaximumSize(new Dimension(548, 500));
        jPanel1.setMinimumSize(new Dimension(548, 500));
        jPanel1.setPreferredSize(new Dimension(548, 500));
        jPanel1.setLayout(new BoxLayout(jPanel1, BoxLayout.LINE_AXIS));

        final GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelRule, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                .addGap(101, 101, 160))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(101, 101, 101)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(114, 114, 114))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(114, 114, 114))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(66, 66, 66))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabelRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabelWinLose, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(40, 40, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton3)
                                .addGap(36, 36, 36)
                                .addComponent(jLabelRule)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(jLabel2)
                                .addGap(20, 20, 20)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 290)
                                .addComponent(jLabelWinLose)
                                .addGap(10,10,10)
                                .addComponent(jLabelRecord)
                                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents



    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButton1;
    private JLabel jLabel2;
    private JLabel jLabelRecord;
    private JLabel jLabelRule;
    private JLabel jLabelWinLose;
    private JPanel jPanel1;
    private JRadioButton jRadioButton1;
    private JRadioButton jRadioButton2;
    private JRadioButton jRadioButton3;
    // End of variables declaration//GEN-END:variables

    private void setLabels() {
        jButton1.setFont(new Font("Segoe UI", Font.BOLD, 18)); // NOI18N
        jButton1.setText("Reset game");
        jButton1.setToolTipText("Press to reset the game");

        jLabel2.setText("Number of turns: " + gameHandler.getCurrentGame().getTurn());
        jLabel2.setFont(new Font("Segoe UI", Font.BOLD, 18));

        jLabelRule.setFont(new Font("Segoe UI", Font.BOLD, 13));
        jLabelRule.setText("<html>Stats: <br> Your record: "+gameHandler.getRecordTurns()+"<br> Total wins: "+gameHandler.getTotalWins()+"<br> Total losses: "+gameHandler.getTotalLosses()+"</html>");
        jLabelRule.setToolTipText("Your record displays the least amount of turns it took you to beat the smurf");

        jRadioButton1.setText("Easy");
        jRadioButton1.setToolTipText("Choose easy difficulty, press reset to apply");
        jRadioButton2.setText("Medium");
        jRadioButton2.setToolTipText("Choose medium difficulty, press reset to apply");
        jRadioButton3.setText("Hard");
        jRadioButton3.setToolTipText("Choose hard difficulty, press reset to apply");

        final ButtonGroup group = new ButtonGroup();
        group.add(jRadioButton1);
        group.add(jRadioButton2);
        group.add(jRadioButton3);
    }

    public void propertyChange(final PropertyChangeEvent evt) {

        if(!gameHandler.getCurrentGame().isHasLost() && !gameHandler.getCurrentGame().isHasWon()){
            repaintBoardView();
        }
        else if (Objects.equals(evt.getPropertyName(), "Won")) {
            for (int i = 0; i<121; i++) {
                buttonBoard.getButton(i).setEnabled(false);
            }
            getjLabel2().setText("You won the game! You won in " + gameHandler.getCurrentGame().getTurn() + " turns. Press reset to play again");
        }
        else if (Objects.equals(evt.getPropertyName(), "Lost")) {
            for (int i = 0; i<121; i++) {
                buttonBoard.getButton(i).setEnabled(false);
            }
            getjLabel2().setText("The Smurf won. It escaped in " + gameHandler.getCurrentGame().getTurn() + " turns. Press reset to play again");
        }
    }

    private void repaintBoardView(){
        getjLabel2().setText("Number of wins: " + gameHandler.getCurrentGame().getTurn() + " ");
        setLabels();

        for(int i = 0; i<121; i++) {

            try {
                setSmurfImage(i);
            } catch (IOException e) {
                buttonBoard.getButton(i).setBackground(Color.RED);
            }

            if (Hexagon.State.FREE.equals(hexagonBoard.getHexagon(i).getCurrentState())&& !buttonBoard.getButton(i).isHexagonHovered()){
                buttonBoard.getButton(i).setBackground(Color.cyan);
                buttonBoard.getButton(i).setEnabled(true);
            }
            else if (Hexagon.State.FREE.equals(hexagonBoard.getHexagon(i).getCurrentState())&& buttonBoard.getButton(i).isHexagonHovered()){
                buttonBoard.getButton(i).setBackground(Color.getHSBColor(0.5f, 0.7f, 0.7f));
                buttonBoard.getButton(i).setEnabled(true);
            }
            else if (Hexagon.State.OCCUPIED.equals(hexagonBoard.getHexagon(i).getCurrentState())) {
                buttonBoard.getButton(i).setEnabled(false);
            }
            else if (Hexagon.State.BLOCKED.equals(hexagonBoard.getHexagon(i).getCurrentState())) {
                buttonBoard.getButton(i).setBackground(Color.darkGray);
                buttonBoard.getButton(i).setEnabled(false);
            }
        }
    }

    private void setSmurfImage(final int index) throws IOException {

        if(Hexagon.State.OCCUPIED.equals(hexagonBoard.getHexagon(index).getCurrentState())){
            buttonBoard.getButton(index).setSmurfImage(bufferedImage);
        }
        else {
            buttonBoard.getButton(index).setSmurfImage(null);
        }
    }

    public JButton getjButton1() {
        return jButton1;
    }

    public JLabel getjLabel2() { return jLabel2; }

    public JRadioButton getjRadioButton1() {
        return jRadioButton1;
    }
    public JRadioButton getjRadioButton2() {
        return jRadioButton2;
    }
    public JRadioButton getjRadioButton3() {
        return jRadioButton3;
    }

    public HexButton getButton(final int index) {
        return buttonBoard.getButton(index);
    }

    public ArrayList<HexButton> getButtonBoard() {
        return buttonBoard.getButtonBoard();
    }

    public void setGame(final Game game) {
        this.gameHandler.getCurrentGame().getBoard().removePropertyChangeListener(this);
        this.hexagonBoard = game.getBoard();
        buttonBoard.setBoard(game.getBoard());
        for(int i = 0; i<121 ;i++){
            buttonBoard.getButton(i).setNewHexagonBoard(this.gameHandler.getCurrentGame().getBoard().getHexagon(i));
        }
        this.gameHandler.getCurrentGame().getBoard().addPropertyChangeListener(this);
    }
}
